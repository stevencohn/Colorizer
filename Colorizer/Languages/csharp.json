{
  "name": "C#",
  "aliases": [
    "CSharp",
    "cs"
  ],
  "rules": [
    {
      "pattern": "(/\\*[^\\r\\n]*)$",
      "scope": "Comment",
      "captures": [
        "Comment"
      ]
    },
    {
      "pattern": "^([^\\r\\n]*\\*/)",
      "scope": "",
      "captures": [
        "Comment"
      ]
    },
    {
      "pattern": "(/\\*(?:[^*]|[\\r\\n]|(?:\\*+(?:[^*/]|[\\r\\n])))*\\*+/)",
      "captures": [
        "Comment"
      ]
    },
    {
      "pattern": "(///)(?:\\s*?(<[/a-zA-Z0-9\\s\"=]+>))*([^\\r\\n]*)",
      "captures": [
        "XmlDocTag",
        "XmlDocTag",
        "XmlDocComment"
      ]
    },
    {
      "pattern": "(//.*?)\\r?$",
      "captures": [
        "Comment"
      ]
    },
    {
      "pattern": "('[^\\n]*?(?<!\\\\)')",
      "captures": [
        "String"
      ]
    },
    {
      "pattern": "(?s)(@\"(?:\"\"|.)*?\"(?!\"))",
      "captures": [
        "StringCSharpVerbatim"
      ]
    },
    {
      "pattern": "(?s)(\"[^\\n]*?(?<!\\\\)\")",
      "captures": [
        "String"
      ]
    },
    {
      "pattern": "\\[(assembly|module|type|return|param|method|field|property|event):[^\\]\"]*(\"[^\\n]*?(?<!\\\\)\")?[^\\]]*\\]",
      "captures": [
        "Keyword",
        "String"
      ]
    },
    {
      "pattern": "^\\s*(\\#define|\\#elif|\\#else|\\#endif|\\#endregion|\\#error|\\#if|\\#line|\\#pragma|\\#region|\\#undef|\\#warning).*?$",
      "captures": [
        "PreprocessorKeyword"
      ]
    },
    {
      "pattern": "\\b(abstract|as|ascending|base|bool|break|by|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|equals|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|goto|group|if|implicit|in|int|into|interface|internal|is|join|let|lock|long|namespace|new|null|object|on|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|var|virtual|void|volatile|where|while|yield|async|await|warning|disable)\\b",
      "captures": [
        "Keyword"
      ]
    },
    {
      "pattern": "\\b([0-9]{1,})\\b",
      "captures": [
        "Number"
      ]
    }
  ]
}
